<!DOCTYPE html>
<!-- saved from url=(0130)https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>View Controller Programming Guide for iOS: Implementing a Container View Controller</title>
  <link rel="stylesheet" type="text/css" href="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/style-1.6.3.css">
  <link rel="stylesheet" type="text/css" href="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/feedback-1.6.3.css">
   
<meta id="j-version" name="j-version" content="">
<meta id="build" name="build" content="c1e4c7a89af8f899a21cfa81fc33ba42">
<meta id="document-version" name="document-version" content="8.3.0">
<meta id="book-assignments" name="book-assignments" content="{Type/Guide}, {Technologies/Cocoa Layer/UIKit}, {Topic/User Experience/Windows &amp; Views}">
<meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40007457">
<meta id="chapterId" name="chapterId" content="TP40007457-CH11">
<meta id="book-title" name="book-title" content="View Controller Programming Guide for iOS">
<meta id="book-resource-type" name="book-resource-type" content="Guide">
<meta id="book-root" name="book-root" content="./">
<meta id="book-json" name="book-json" content="book.json">
<meta id="date" name="date" content="2015-09-16">
<meta id="description" name="description" content="Explains how to use view controllers to implement radio, navigation, and modal interfaces.">
<meta id="IndexTitle" name="IndexTitle" content="">
<meta id="resources-uri" name="resources-uri" content="../../Resources/1282">
<link id="book-index-page" rel="Start" title="" type="text/html" href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/index.html">
<!-- , next_chapter: next_chapter, previous_chapter: previous_chapter -->
<link id="next-page" rel="Next" type="text/html" href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html">
<link id="previous-page" rel="Prev" type="text/html" href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html">
<meta id="devcenter" name="devcenter" content="&lt;!-- DEVCENTER_NAME --&gt;">
<meta id="devcenter-url" name="devcenter-url" content="&lt;!-- DEVCENTER_URL --&gt;">
<meta id="reflib" name="reflib" content="&lt;!-- REFLIB_NAME --&gt;">

<meta id="xcode-display" name="xcode-display" content="render">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
<meta id="platforms" name="platforms" content="iOS,tvOS">
</head>

  <body id="conceptual_flow_with_tasks" class="jazz">
    
    <header id="ios_header" class="hideOnPrint hideInXcode">
  <div class="content-wrapper">
    <p class="header-text">
    	<a href="https://developer.apple.com/library/archive/navigation/" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/navigation/_1&quot;;return this.s_oc?this.s_oc(e):true">Documentation Archive
 		</a>
 </p>
    <p id="wwdr"><img id="apple_logo" src="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/apple2.png" height="14px" width="12px" aria-hidden="true"><a href="https://developer.apple.com/" onclick="s_objectID=&quot;https://developer.apple.com/_1&quot;;return this.s_oc?this.s_oc(e):true">Developer</a></p>
  </div>
</header>

    <section id="valence">
  <div class="content-wrapper">
    <p id="hierarchial_navigation">
      <span id="book_title">View Controller Programming Guide for iOS</span>
    </p>
    <form id="search" class="hideInXcode" method="get" action="https://developer.apple.com/search/index.php" accept-charset="utf-8" autocomplete="off">
  <input type="search" id="ssi_SearchField" placeholder="Search Documentation Archive" name="q" autocomplete="off" tabindex="2">
</form>

      
   
   



    <img id="shortstack" src="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/shortstack_2x.png">
  </div>
</section>
    <div class="content-wrapper">
      <nav id="navigator" class="book-parts hideInXcode" role="navigation">
    <ul class="nav-parts">
        <li data-id="//apple_ref/doc/uid/TP40007457-CH1-SW1" class="part-name">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/index.html#//apple_ref/doc/uid/TP40007457-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/index.ht_1&quot;;return this.s_oc?this.s_oc(e):true">Overview</a>
          <ul class="nav-chapters">
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/index.html#//apple_ref/doc/uid/TP40007457-CH2-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH2-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/index.ht_2&quot;;return this.s_oc?this.s_oc(e):true">The Role of View Controllers</a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheViewControllerHierarchy.html#//apple_ref/doc/uid/TP40007457-CH33-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH33-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheViewC_1&quot;;return this.s_oc?this.s_oc(e):true">The View Controller Hierarchy</a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/DesignTips.html#//apple_ref/doc/uid/TP40007457-CH5-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH5-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/DesignTi_1&quot;;return this.s_oc?this.s_oc(e):true">Design Tips</a>
              </li>
          </ul>
        </li>
        <li data-id="//apple_ref/doc/uid/TP40007457-CH6-SW1" class="part-name nav-part-active open-part">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/DefiningYourSubclass.html#//apple_ref/doc/uid/TP40007457-CH7-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH7-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Defining_1&quot;;return this.s_oc?this.s_oc(e):true">View Controller Definition</a>
          <ul class="nav-chapters">
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/DefiningYourSubclass.html#//apple_ref/doc/uid/TP40007457-CH7-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH7-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Defining_2&quot;;return this.s_oc?this.s_oc(e):true">Defining Your Subclass</a>
              </li>
              <li class="nav-chapter nav-current-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH11-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Implemen_1&quot;;return this.s_oc?this.s_oc(e):true">Implementing a Container View Controller</a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/SupportingAccessibility.html#//apple_ref/doc/uid/TP40007457-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Supporti_1&quot;;return this.s_oc?this.s_oc(e):true">Supporting Accessibility</a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/PreservingandRestoringState.html#//apple_ref/doc/uid/TP40007457-CH28-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH28-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Preservi_1&quot;;return this.s_oc?this.s_oc(e):true">Preserving and Restoring State</a>
              </li>
          </ul>
        </li>
        <li data-id="//apple_ref/doc/uid/TP40007457-CH13-SW1" class="part-name">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/PresentingaViewController.html#//apple_ref/doc/uid/TP40007457-CH14-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH14-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Presenti_1&quot;;return this.s_oc?this.s_oc(e):true">Presentations and Transitions</a>
          <ul class="nav-chapters">
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/PresentingaViewController.html#//apple_ref/doc/uid/TP40007457-CH14-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH14-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Presenti_2&quot;;return this.s_oc?this.s_oc(e):true">Presenting a View Controller</a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/UsingSegues.html#//apple_ref/doc/uid/TP40007457-CH15-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH15-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/UsingSeg_1&quot;;return this.s_oc?this.s_oc(e):true">Using Segues</a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/CustomizingtheTransitionAnimations.html#//apple_ref/doc/uid/TP40007457-CH16-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH16-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Customiz_1&quot;;return this.s_oc?this.s_oc(e):true">Customizing the Transition Animations</a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/DefiningCustomPresentations.html#//apple_ref/doc/uid/TP40007457-CH25-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH25-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Defining_3&quot;;return this.s_oc?this.s_oc(e):true">Creating Custom Presentations</a>
              </li>
          </ul>
        </li>
        <li data-id="//apple_ref/doc/uid/TP40007457-CH18-SW1" class="part-name">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdaptiveModel.html#//apple_ref/doc/uid/TP40007457-CH19-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH19-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdapt_1&quot;;return this.s_oc?this.s_oc(e):true">Adaptivity and Size Changes</a>
          <ul class="nav-chapters">
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdaptiveModel.html#//apple_ref/doc/uid/TP40007457-CH19-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH19-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/TheAdapt_2&quot;;return this.s_oc?this.s_oc(e):true">The Adaptive Model</a>
              </li>
              <li class="nav-chapter">
              	<a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/BuildinganAdaptiveInterface.html#//apple_ref/doc/uid/TP40007457-CH32-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH32-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Building_1&quot;;return this.s_oc?this.s_oc(e):true">Building an Adaptive Interface</a>
              </li>
          </ul>
        </li>
        <li data-id="revision-history" class="part-name">
          <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/RevisionHistory.html#//apple_ref/doc/uid/TP40007457-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Revision_1&quot;;return this.s_oc?this.s_oc(e):true">Revision History</a>
          <ul class="nav-chapters">
            <li class="nav-chapter">
              <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/RevisionHistory.html#//apple_ref/doc/uid/TP40007457-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Revision_2&quot;;return this.s_oc?this.s_oc(e):true">Document Revision History</a>
            </li>
          </ul>
        </li>
    </ul>
</nav>

      <menu id="bashful" type="toolbar">
  <div class="shield"></div>
  <menuitem id="jump_to" class="menu-bar-item closed">
  <span>On This Page</span>
  <div class="chevron">
    <div class="chevy chevron-left"></div>
    <div class="chevy chevron-right"></div>
  </div>
  <menu type="list" class="details">
      <ul class="list-bullet">
          <li class="item">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW7" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Implemen_2&quot;;return this.s_oc?this.s_oc(e):true">Designing a Custom Container View Controller</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW20" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Implemen_3&quot;;return this.s_oc?this.s_oc(e):true">Configuring a Container in Interface Builder</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW12" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Implemen_4&quot;;return this.s_oc?this.s_oc(e):true">Implementing a Custom Container View Controller</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW17" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Implemen_5&quot;;return this.s_oc?this.s_oc(e):true">Suggestions for Building a Container View Controller</a>
          </li>
          <li class="item">
            <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW18" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Implemen_6&quot;;return this.s_oc?this.s_oc(e):true">Delegating Control to a Child View Controller</a>
          </li>
      </ul>
  </menu>
</menuitem>

</menu>
<div class="pixel-line"></div>
<div class="rubber-band-gap"></div>
<article class="chapter">
  <a name="//apple_ref/doc/uid/TP40007457-CH11"></a><a name="//apple_ref/doc/uid/TP40007457-CH11-SW1"></a>

  <h2 class="chapter-name">Implementing a Container View Controller</h2>


  
  	<section class="section">
  		<p class="para">
  
</p>
<p class="para">
  Container view controllers are a way to combine the content from multiple view controllers into a single user interface. Container view controllers are most often used to facilitate navigation and to create new user interface types based on existing content. Examples of container view controllers in UIKit include <code class="code-voice u-api-no-link">UINavigationController</code>, <code class="code-voice u-api-no-link">UITabBarController</code>, and <code class="code-voice u-api-no-link">UISplitViewController</code>, all of which facilitate navigation between different parts of your user interface. 
</p>

		</section> 


  <section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW7"></a>
  <h3 class="section-name" tabindex="0">Designing a Custom Container View Controller</h3>
  <p class="para">
  In almost every way, a container view controller is like any other content view controller in that it manages a root view and some content. The difference is that a container view controller gets part of its content from other view controllers. The content it gets is limited to the other view controllers’ views, which it embeds inside its own view hierarchy. The container view controller sets the size and position of any embedded views, but the original view controllers still manage the content inside those views. 
</p><p class="para">
  When designing your own container view controllers, always understand the relationships between the container and contained view controllers. The relationships of the view controllers can help inform how their content should appear onscreen and how your container manages them internally. During the design process, ask yourself the following questions: 
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  What is the role of the container and what role do its children play?
</p>
</li><li class="item"><p class="para">
  How many children are displayed simultaneously?
</p>
</li><li class="item"><p class="para">
  What is the relationship (if any) between sibling view controllers?
</p>
</li><li class="item"><p class="para">
  How are child view controllers added to or removed from the container?
</p>
</li><li class="item"><p class="para">
  Can the size or position of the children change? Under what conditions do those changes occur?
</p>
</li><li class="item"><p class="para">
  Does the container provide any decorative or navigation-related views of its own?
</p>
</li><li class="item"><p class="para">
  What kind of communication is required between the container and its children? Does the container need to report specific events to its children other than the standard ones defined by the <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller_1&quot;;return this.s_oc?this.s_oc(e):true">UIViewController</a></code> class?
</p>
</li><li class="item"><p class="para">
  Can the appearance of the container be configured in different ways? If so, how?
</p>
</li>
</ul><p class="para">
  The implementation of a container view controller is relatively straightforward after you have defined the roles of the various objects. The only requirement from UIKit is that you establish a formal parent-child relationship between the container view controller and any child view controllers. The parent-child relationship ensures that the children receive any relevant system messages. Apart from that, most of the real work happens during the layout and management of the contained views, which is different for each container. You can place views anywhere in your container’s content area and size those views however you want. You can also add custom views to the view hierarchy to provide decoration or to aid in navigation. 
</p>
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW10"></a>
  <h3 class="section-name" tabindex="0">Example: Navigation Controller</h3>
  <p class="para">
  A <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uinavigationcontroller" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uinavigationcontroller_1&quot;;return this.s_oc?this.s_oc(e):true">UINavigationController</a></code> object supports navigation through a hierarchical data set. A navigation interface presents one child view controller at a time. A navigation bar at the top of the interface displays the current position in the data hierarchy and displays a back button to move back one level. Navigation down into the data hierarchy is left to the child view controller and can involve the use of tables or buttons.
</p><p class="para">
  Navigation between view controllers is managed jointly by the navigation controller and its children. When the user interacts with a button or table row of a child view controller, the child asks the navigation controller to push a new view controller into view. The child handles the configuration of the new view controller’s contents, but the navigation controller manages the transition animations. The navigation controller also manages the navigation bar, which displays a back button for dismissing the topmost view controller. 
</p><p class="para">
  <span class="x-name-no-link">Figure 5-1</span> shows the structure of a navigation controller and its views. Most of the content area is filled by the topmost child view controller and only a small portion is occupied by the navigation bar.
</p><figure class="figure">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW8"></a>
  <span class="caption"><strong class="caption-number">Figure 5-1</strong>Structure of a navigation interface</span>
  <img src="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/VCPG_structure-of-navigation-interface_5-1_2x.png" alt="image: ../Art/VCPG_structure-of-navigation-interface_5-1_2x.png" width="593" height="285">
</figure><p class="para">
  In both compact and regular environments, a navigation controller displays only one child view controller at a time. The navigation controller resizes its child to fit the available space.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW11"></a>
  <h3 class="section-name" tabindex="0">Example: Split View Controller</h3>
  <p class="para">
  A <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uisplitviewcontroller_1&quot;;return this.s_oc?this.s_oc(e):true">UISplitViewController</a></code> object displays the content of two view controllers in a master-detail arrangement. In this arrangement, the content of one view controller (the master) determines what details are displayed by the other view controller. The visibility of the two view controllers is configurable but is also governed by the current environment. In a regularly horizontal environment, the split view controller can show both child view controllers side-by-side or it can hide the master and display it as needed. In a compact environment, the split view controller displays only one view controller at a time. 
</p><p class="para">
  <span class="x-name-no-link">Figure 5-2</span> shows the structure of a split view interface and its views in a regularly horizontal environment. The split view controller itself has only its container view by default. In this example, the two child views are displayed side-by-side. The size of the child views is configurable, as is the visibility of the master view.  
</p><figure class="figure">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW9"></a>
  <span class="caption"><strong class="caption-number">Figure 5-2</strong>A split view interface</span>
  <img src="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/VCPG-split-view-inerface_5-2_2x.png" alt="image: ../Art/VCPG-split-view-inerface_5-2_2x.png" width="606" height="268">
</figure>
  
</section>

</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW20"></a>
  <h3 class="section-name" tabindex="0">Configuring a Container in Interface Builder</h3>
  <p class="para">
  To create a parent-child container relationship at design time, add a container view object to your storyboard scene, as shown in <span class="x-name-no-link">Figure 5-3</span>. A container view object is a placeholder object that represents the contents of a child view controller. Use that view to size and position the child’s root view in relation to the other views in the container.
</p><figure class="figure">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW24"></a>
  <span class="caption"><strong class="caption-number">Figure 5-3</strong>Adding a container view in Interface Builder</span>
  <img src="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/container_view_embed_2x.png" alt="image: ../Art/container_view_embed_2x.png" width="680" height="395">
</figure><p class="para">
  When you load a view controller with one or more container views, Interface Builder also loads the child view controllers associated with those views. The children must be instantiated at the same time as the parent so that the appropriate parent-child relationships can be created.
</p><p class="para">
  If you do not use Interface Builder to set up your parent-child container relationships, you must create those relationships programmatically by adding each child to the container view controller, as described in <span class="x-name"><a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#//apple_ref/doc/uid/TP40007457-CH11-SW13" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH11-SW13" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Implemen_7&quot;;return this.s_oc?this.s_oc(e):true">Adding a Child View Controller to Your Content</a></span>. 
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW12"></a>
  <h3 class="section-name" tabindex="0">Implementing a Custom Container View Controller</h3>
  <p class="para">
  To implement a container view controller, you must establish relationships between your view controller and its child view controllers. Establishing these parent-child relationships is required before you try to manage the views of any child view controllers. Doing so lets UIKit know that your view controller is managing the size and position of the children. You can create these relationships in Interface Builder or create them programmatically. When creating parent-child relationships programmatically, you explicitly add and remove child view controllers as part of your view controller setup.
</p>
  <section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW13"></a>
  <h3 class="section-name" tabindex="0">Adding a Child View Controller to Your Content</h3>
  <p class="para">
  To incorporate a child view controller into your content programmatically, create a parent-child relationship between the relevant view controllers by doing the following:  
</p><ol class="list-number">
  <li class="item"><p class="para">
  Call the <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621394-addchildviewcontroller" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621394-addchildviewcontroller_1&quot;;return this.s_oc?this.s_oc(e):true">addChildViewController:</a></code> method of your container view controller. 
</p>
<p class="para">
  This method tells UIKit that your container view controller is now managing the view of the child view controller.
</p>
</li><li class="item"><p class="para">
  Add the child’s root view to your container’s view hierarchy.
</p>
<p class="para">
  Always remember to set the size and position of the child’s frame as part of this process.
</p>
</li><li class="item"><p class="para">
  Add any constraints for managing the size and position of the child’s root view.
</p>
</li><li class="item"><p class="para">
  Call the <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621405-didmove" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621405-didmove_1&quot;;return this.s_oc?this.s_oc(e):true">didMoveToParentViewController:</a></code> method of the child view controller.  
</p>
</li>
</ol><p class="para">
  <span class="x-name-no-link">Listing 5-1</span> shows how a container embeds a child view controller in its container. After establishing the parent-child relationship, the container sets the frame of its child and adds the child’s view to its own view hierarchy. Setting the frame size of the child’s view is important and ensures that the view shows up correctly in your container. After adding the view, the container calls the child’s <code class="code-voice u-api-no-link">didMoveToParentViewController:</code> method to give the child view controller a chance to respond to the change in view ownership.
</p><section class="code-listing">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW2"></a>
    <span class="caption"><strong class="caption-number">Listing 5-1</strong>Adding a child view controller to a container</span>
  <div class="code-sample">
      <div class="Objective-C">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">displayContentController:</span> <span class="p">(</span><span class="n">UIViewController</span><span class="o">*</span><span class="p">)</span> <span class="n">content</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">self</span> <span class="nl">addChildViewController:</span><span class="n">content</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">   <span class="n">content</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">frameForContentController</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="nl">addSubview:</span><span class="n">self</span><span class="p">.</span><span class="n">currentClientView</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">content</span> <span class="nl">didMoveToParentViewController:</span><span class="n">self</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice"><span class="p">}</span>
</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  In the preceding example, notice that you call only the <code class="code-voice u-api-no-link">didMoveToParentViewController:</code> method of the child. That is because the <code class="code-voice u-api-no-link">addChildViewController:</code> method calls the child’s <code class="code-voice u-api-no-link">willMoveToParentViewController:</code> method for you. The reason that you must call the <code class="code-voice u-api-no-link">didMoveToParentViewController:</code> method yourself is that the method cannot be called until after you embed the child’s view into your container’s view hierarchy.
</p><p class="para">
  When using Auto Layout, set up constraints between the container and child after adding the child to the container’s view hierarchy. Your constraints should affect the size and position of only the child’s root view. Do not alter the contents of the root view or any other views in the child’s view hierarchy.
</p>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW15"></a>
  <h3 class="section-name" tabindex="0">Removing a Child View Controller</h3>
  <p class="para">
  To remove a child view controller from your content, remove the parent-child relationship between the view controllers by doing the following:
</p><ol class="list-number">
  <li class="item"><p class="para">
  Call the child’s <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621381-willmovetoparentviewcontroller" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621381-willmovetoparentviewcont_1&quot;;return this.s_oc?this.s_oc(e):true">willMoveToParentViewController:</a></code> method with the value <code class="code-voice">nil</code>.
</p>
</li><li class="item"><p class="para">
  Remove any constraints that you configured with the child’s root view.
</p>
</li><li class="item"><p class="para">
  Remove the child’s root view from your container’s view hierarchy.
</p>
</li><li class="item"><p class="para">
  Call the child’s <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621425-removefromparentviewcontroller" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621425-removefromparentviewcont_1&quot;;return this.s_oc?this.s_oc(e):true">removeFromParentViewController</a></code> method to finalize the end of the parent-child relationship.
</p>
</li>
</ol><p class="para">
  Removing a child view controller permanently severs the relationship between parent and child. Remove a child view controller only when you no longer need to refer to it. For example, a navigation controller does not remove its current child view controllers when a new one is pushed onto the navigation stack. It removes them only when they are popped off the stack. 
</p><p class="para">
  <span class="x-name-no-link">Listing 5-2</span> shows you how to remove a child view controller from its container. Calling the <code class="code-voice u-api-no-link">willMoveToParentViewController:</code> method with the value <code class="code-voice">nil</code> gives the child view controller an opportunity to prepare for the change. The  <code class="code-voice u-api-no-link">removeFromParentViewController</code> method also calls the child’s <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621405-didmove" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621405-didmove_2&quot;;return this.s_oc?this.s_oc(e):true">didMoveToParentViewController:</a></code> method, passing that method a value of <code class="code-voice">nil</code>. Setting the parent view controller to <code class="code-voice">nil</code> finalizes the removal of the child’s view from your container. 
</p><section class="code-listing">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW3"></a>
    <span class="caption"><strong class="caption-number">Listing 5-2</strong>Removing a child view controller from a container</span>
  <div class="code-sample">
      <div class="Objective-C">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">hideContentController:</span> <span class="p">(</span><span class="n">UIViewController</span><span class="o">*</span><span class="p">)</span> <span class="n">content</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">content</span> <span class="nl">willMoveToParentViewController:</span><span class="nb">nil</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">content</span><span class="p">.</span><span class="n">view</span> <span class="n">removeFromSuperview</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">content</span> <span class="n">removeFromParentViewController</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice"><span class="p">}</span>
</code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW16"></a>
  <h3 class="section-name" tabindex="0">Transitioning Between Child View Controllers</h3>
  <p class="para">
  When you want to animate the replacement of one child view controller with another, incorporate the addition and removal of the child view controllers into the transition animation process. Before the animations, make sure both child view controllers are part of your content but let the current child know that it is about to go away. During your animations, move the new child’s view into position and remove the old child’s view. At the completion of the animation, complete the removal of the child view controller. 
</p><p class="para">
  <span class="x-name-no-link">Listing 5-3</span> shows an example of how to swap one child view controller for another using a transition animation. In this example, the new view controller is animated to the rectangle currently occupied by the existing child view controller, which is moved offscreen. After the animations finish, the completion block removes the child view controller from the container. In this example, the <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621363-transition" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621363-transition_1&quot;;return this.s_oc?this.s_oc(e):true">transitionFromViewController:toViewController:duration:options:animations:completion:</a></code> method automatically updates the container’s view hierarchy, so you do not need to add and remove the views yourself.
</p><section class="code-listing">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW4"></a>
    <span class="caption"><strong class="caption-number">Listing 5-3</strong>Transitioning between two child view controllers</span>
  <div class="code-sample">
      <div class="Objective-C">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">cycleFromViewController:</span> <span class="p">(</span><span class="n">UIViewController</span><span class="o">*</span><span class="p">)</span> <span class="n">oldVC</span>
</code></li>
            <li><code class="code-voice">               <span class="nl">toViewController:</span> <span class="p">(</span><span class="n">UIViewController</span><span class="o">*</span><span class="p">)</span> <span class="n">newVC</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">   <span class="c1">// Prepare the two view controllers for the change.</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">oldVC</span> <span class="nl">willMoveToParentViewController:</span><span class="nb">nil</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">self</span> <span class="nl">addChildViewController:</span><span class="n">newVC</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice"> 
</code></li>
            <li><code class="code-voice">   <span class="c1">// Get the start frame of the new view controller and the end frame</span>
</code></li>
            <li><code class="code-voice">   <span class="c1">// for the old view controller. Both rectangles are offscreen.</span>
</code></li>
            <li><code class="code-voice">   <span class="n">newVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">newViewStartFrame</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">   <span class="n">CGRect</span> <span class="n">endFrame</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="n">oldViewEndFrame</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice"> 
</code></li>
            <li><code class="code-voice">   <span class="c1">// Queue up the transition animation.</span>
</code></li>
            <li><code class="code-voice">   <span class="p">[</span><span class="n">self</span> <span class="nl">transitionFromViewController:</span> <span class="n">oldVC</span> <span class="nl">toViewController:</span> <span class="n">newVC</span>
</code></li>
            <li><code class="code-voice">        <span class="nl">duration:</span> <span class="mf">0.25</span> <span class="nl">options:</span><span class="mi">0</span>
</code></li>
            <li><code class="code-voice">        <span class="nl">animations:</span><span class="o">^</span><span class="p">{</span>
</code></li>
            <li><code class="code-voice">            <span class="c1">// Animate the views to their final positions.</span>
</code></li>
            <li><code class="code-voice">            <span class="n">newVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">oldVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span><span class="p">;</span>
</code></li>
            <li><code class="code-voice">            <span class="n">oldVC</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">endFrame</span><span class="p">;</span>
</code></li>
            <li><code class="code-voice">        <span class="p">}</span>
</code></li>
            <li><code class="code-voice">        <span class="nl">completion:</span><span class="o">^</span><span class="p">(</span><span class="kt">BOOL</span> <span class="n">finished</span><span class="p">)</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">           <span class="c1">// Remove the old view controller and send the final</span>
</code></li>
            <li><code class="code-voice">           <span class="c1">// notification to the new view controller.</span>
</code></li>
            <li><code class="code-voice">           <span class="p">[</span><span class="n">oldVC</span> <span class="n">removeFromParentViewController</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">           <span class="p">[</span><span class="n">newVC</span> <span class="nl">didMoveToParentViewController:</span><span class="n">self</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice">        <span class="p">}];</span>
</code></li>
            <li><code class="code-voice"><span class="p">}</span>
</code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW14"></a>
  <h3 class="section-name" tabindex="0">Managing Appearance Updates for Children</h3>
  <p class="para">
  After adding a child to a container, the container automatically forwards appearance-related messages to the child. This is normally the behavior you want, because it ensures that all events are properly sent. However, sometimes the default behavior may send those events in an order that doesn’t make sense for your container. For example, if multiple children are simultaneously changing their view state, you may want to consolidate the changes so that the appearance callbacks all happen at the same time in a more logical order.
</p><p class="para">
  To take over responsibility for appearance callbacks, override the <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621389-shouldautomaticallyforwardappear" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621389-shouldautomaticallyforwa_1&quot;;return this.s_oc?this.s_oc(e):true">shouldAutomaticallyForwardAppearanceMethods</a></code> method in your container view controller and return <code class="k-constant-name code-voice Objective-C">NO</code><code class="k-constant-name code-voice Swift">false</code>, as shown in <span class="x-name-no-link">Listing 5-4</span>. Returning <code class="k-constant-name code-voice Objective-C">NO</code><code class="k-constant-name code-voice Swift">false</code> lets UIKit know that your container view controller notifies its children of changes in its appearance.
</p><section class="code-listing">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW5"></a>
    <span class="caption"><strong class="caption-number">Listing 5-4</strong>Disabling automatic appearance forwarding</span>
  <div class="code-sample">
      <div class="Objective-C">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span> <span class="n">shouldAutomaticallyForwardAppearanceMethods</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">    <span class="k">return</span> <span class="n">NO</span><span class="p">;</span>
</code></li>
            <li><code class="code-voice"><span class="p">}</span>
</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">
  When an appearance transition occurs, call the child’s <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621387-beginappearancetransition" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621387-beginappearancetransitio_1&quot;;return this.s_oc?this.s_oc(e):true">beginAppearanceTransition:animated:</a></code> or <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621503-endappearancetransition" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621503-endappearancetransition_1&quot;;return this.s_oc?this.s_oc(e):true">endAppearanceTransition</a></code> method as appropriate. For example, if your container has a single child referenced by a <code class="code-voice">child</code> property, your container would forward these messages to the child as shown in <span class="x-name-no-link">Listing 5-5</span>. 
</p><section class="code-listing">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW6"></a>
    <span class="caption"><strong class="caption-number">Listing 5-5</strong>Forwarding appearance messages when the container appears or disappears</span>
  <div class="code-sample">
      <div class="Objective-C">
        <ol class="code-lines">
            <li><code class="code-voice"><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">viewWillAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">child</span> <span class="nl">beginAppearanceTransition:</span> <span class="n">YES</span> <span class="nl">animated:</span> <span class="n">animated</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice"><span class="p">}</span>
</code></li>
            <li><code class="code-voice"> 
</code></li>
            <li><code class="code-voice"><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">child</span> <span class="n">endAppearanceTransition</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice"><span class="p">}</span>
</code></li>
            <li><code class="code-voice"> 
</code></li>
            <li><code class="code-voice"><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">viewWillDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">child</span> <span class="nl">beginAppearanceTransition:</span> <span class="n">NO</span> <span class="nl">animated:</span> <span class="n">animated</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice"><span class="p">}</span>
</code></li>
            <li><code class="code-voice"> 
</code></li>
            <li><code class="code-voice"><span class="o">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nl">viewDidDisappear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="n">animated</span> <span class="p">{</span>
</code></li>
            <li><code class="code-voice">    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">child</span> <span class="n">endAppearanceTransition</span><span class="p">];</span>
</code></li>
            <li><code class="code-voice"><span class="p">}</span>
</code></li>
        </ol>
      </div>
  </div>
</section>
  
</section>

</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW17"></a>
  <h3 class="section-name" tabindex="0">Suggestions for Building a Container View Controller</h3>
  <p class="para">
  Designing, developing, and testing a new container view controller takes time. Although the individual behaviors are straightforward, the controller as a whole can be quite complex. Consider the following tips when implementing your own container classes:
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  <strong class="inline-head">Access only the root view of a child view controller.</strong> A container should access only the root view of each child—that is, the view returned by the child’s <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/1621460-view" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uiviewcontroller/1621460-view_1&quot;;return this.s_oc?this.s_oc(e):true">view</a></code> property. It should never access any of the child’s other views.
</p>
</li><li class="item"><p class="para">
  <strong class="inline-head">Child view controllers should have minimal knowledge of their container.</strong> A child view controller should focus on its own content. If the container allows its behavior to be influenced by a child, it should use the <span class="pediaLink" data-header="Delegation" data-contents="Delegation is a simple and powerful pattern in which one object in a program acts on behalf of, or in coordination with, another object."><a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html#//apple_ref/doc/uid/TP40008195-CH14" data-renderer-version="1" target="_self" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/DevPedia-CocoaCore/D_1&quot;;return this.s_oc?this.s_oc(e):true">delegation</a></span> design pattern to manage those interactions. 
</p>
</li><li class="item"><p class="para">
  <strong class="inline-head">Design your container using regular views first.</strong> Using regular views (instead of the views from child view controllers) gives you an opportunity to test layout constraints and animated transitions in a simplified environment. When the regular views work as expected, swap them out for the views of your child view controllers.
</p>
</li>
</ul>
  
</section>
<section class="section">
  <a name="//apple_ref/doc/uid/TP40007457-CH11-SW18"></a>
  <h3 class="section-name" tabindex="0">Delegating Control to a Child View Controller</h3>
  <p class="para">
  A container view controller can delegate some aspects of its own appearance to one or more of its children. You can delegate control in the following ways: 
</p><ul class="list-bullet">
  <li class="item"><p class="para">
  <strong class="inline-head">Let a child view controller determine the status bar style.</strong> To delegate the status bar appearance to a child, override one or both of the <code class="code-voice u-api-no-link">childViewControllerForStatusBarStyle</code> and <code class="code-voice u-api-no-link">childViewControllerForStatusBarHidden</code> methods in your container view controller.
</p>
</li><li class="item"><p class="para">
  <strong class="inline-head">Let the child specify its own preferred size.</strong> A container with a flexible layout can use the child’s own <code class="code-voice u-api"><a href="https://developer.apple.com/documentation/uikit/uicontentcontainer/1621481-preferredcontentsize" class="urlLink" onclick="s_objectID=&quot;https://developer.apple.com/documentation/uikit/uicontentcontainer/1621481-preferredcontentsize_1&quot;;return this.s_oc?this.s_oc(e):true">preferredContentSize</a></code> property to help determine the size of the child.
</p>
</li>
</ul>
  
</section>

  	
 	<section id="next_previous" class="">
    		<p class="previous-link"><a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/DefiningYourSubclass.html#//apple_ref/doc/uid/TP40007457-CH7-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH7-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Defining_4&quot;;return this.s_oc?this.s_oc(e):true">Defining Your Subclass</a></p>
  			<p class="next-link"><a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/SupportingAccessibility.html#//apple_ref/doc/uid/TP40007457-CH12-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH12-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Supporti_2&quot;;return this.s_oc?this.s_oc(e):true">Supporting Accessibility</a></p>

    <p class="copyright">Copyright © 2018 Apple Inc. All rights reserved. 
  <a class="link" href="http://www.apple.com/legal/terms/site.html" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/legal/terms/site.html_1&quot;;return this.s_oc?this.s_oc(e):true">Terms of Use</a> | 
  <a class="link" href="http://www.apple.com/privacy/" target="_blank" rel="external" onclick="s_objectID=&quot;http://www.apple.com/privacy/_1&quot;;return this.s_oc?this.s_oc(e):true">Privacy Policy</a> | 
  <a href="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/RevisionHistory.html#//apple_ref/doc/uid/TP40007457-CH99-SW1" data-renderer-version="2" data-id="//apple_ref/doc/uid/TP40007457-CH99-SW1" onclick="s_objectID=&quot;https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/Revision_3&quot;;return this.s_oc?this.s_oc(e):true">Updated: 2015-09-16</a>
</p>
  </section>
</article>

    </div>
    <div id="big_button"></div>
    <footer id="footer">
  <script src="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/devpubs-1.6.3.js" type="text/javascript" charset="utf-8"></script>
  <div id="_omniture_top">
<!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. -->
<script type="text/javascript">
/* RSID: */
var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
</script>

<script type="text/javascript" src="./View Controller Programming Guide for iOS_ Implementing a Container View Controller_files/s_code_h.js"></script>
<script type="text/javascript">
s.pageName=AC.Tracking.pageName();
s.channel="www.us.developer"

/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
var s_code=s.t();if(s_code)document.write(s_code)</script>
<!-- End SiteCatalyst code version: H.8. -->
</div>

</footer>

    
  
    <div id="blackout">
    <div id="preload"></div>
</div>
<div id="modal" aria-hidden="true">
    <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div>
    <div id="sending" class="hidden">
        <h2 tabindex="0">Sending feedback…</h2>
        <div id="sending_img"></div>
    </div>
    <div id="error" class="hidden">
        <h2 tabindex="0">We’re sorry, an error has occurred.</h2>
        <p>Please try submitting your feedback later.</p>
        <div id="error_icon"></div>
    </div>
    <div id="success" class="hidden">
        <h2 tabindex="0">Thank you for providing feedback!</h2>
        <p>Your input helps improve our developer documentation.</p>
        <div id="thank_you_icon"></div>
    </div>
    
    <form id="feedback" action="https://developer.apple.com/library/archive/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html#" method="post">
        <div class="left-leaf">
            <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2>     
            <sup id="a1" class="asterisk" aria-hidden="true">*</sup>

            <div id="star_group" role="radiogroup" aria-required="true">
                <label> 
                    <input class="radio" type="radio" name="helped" value="1"> 
                    Very helpful
                </label>
                <label> 
                    <input class="radio" type="radio" name="helped" value="2"> 
                    Somewhat helpful
                </label>
                <label>
                    <input class="radio" type="radio" name="helped" value="3"> 
                    Not helpful
                </label>
            </div>
        </div>
        <div class="right-leaf">
            <h2>How can we improve this document?</h2>
            <div id="improve" class="checkboxes">
                <label>
                    <input type="checkbox" name="typo"> 
                    Fix typos or links
                </label>
                <label>
                    <input type="checkbox" name="infoIncorrect"> 
                    Fix incorrect information
                </label>
                <label>
                    <input type="checkbox" name="needs_examples"> 
                    Add or update code samples
                </label>
                <label>
                    <input type="checkbox" name="needs_art"> 
                    Add or update illustrations
                </label>
                <label>
                    <input type="checkbox" name="missingInfo"> 
                    Add information about...
                </label>
            </div>
        </div>

        <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required=""></textarea>
        <sup id="a2" class="asterisk" aria-hidden="true">*</sup>

        <p class="fineprint">
            <em aria-hidden="true"><span>*</span> Required information</em>
        </p> 

        <input id="submit" type="button" value="Send">

        <section id="legal">
            <p>
                To submit a product bug or enhancement request, please visit the 
                <a href="https://developer.apple.com/bugreporter/" target="_blank" onclick="s_objectID=&quot;https://developer.apple.com/bugreporter/_1&quot;;return this.s_oc?this.s_oc(e):true">Bug Reporter</a> 
                page.
            </p>
            <p>
                Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank" onclick="s_objectID=&quot;http://www.apple.com/legal/policies/ideas.html_1&quot;;return this.s_oc?this.s_oc(e):true">Apple's Unsolicited Idea Submission Policy</a> 
                before you send us your feedback.
            </p> 
        </section>
    </form>
</div>



</body></html>